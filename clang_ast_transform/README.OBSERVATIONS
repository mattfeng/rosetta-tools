Here are some key observations/notes about clang's AST matchers in chronological order.

*) There reference guide at http://clang.llvm.org/docs/LibASTMatchersReference.html is
   very minimalistic, generated by Doxygen from source. So, look at the source code
   for the AST matchers, like in:
   
     llvm/tools/clang/lib/ASTMatchers/ASTMatchFinder.cpp 
     llvm/tools/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
     
*) Rewriting templates seems difficult. At the template definition time
   it may not be clear if there is an implicit cast needed or not, so
   no such node is created in the AST. I have no solution how to handle
   such cases.
   
*) Rewriting templates is tough. The Lexer determines the end of the
   statement and sometimes it's not the whole thing. Example:
   
   template <class T>
   foo() {
        metric_value = new MetricValue<T>;
   }

   becomes:
        metric_value = MetricValueBaseOP( new ) MetricValue<T>;
        
   while it should be:
        metric_value = MetricValueBaseOP( new MetricValue<T> );
        
   
*) Multiple rewrites per statement screws things up, because the column
   coordinates not longer are correct on the subsequence rewrite and the AST
   doesn't get updated on the fly (understandably).
   
*) Write as specific matchers as you can. It's easier to extend those or add
   new ones to include slightly different variations of the AST than hunt down
   why on earth a matcher matches other place you didn't intend to match.
