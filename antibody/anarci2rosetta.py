#!/usr/bin/python

## @file   anarci2rosetta.py
## @brief  Generates JSON standard output with CDR sequence position ranges compatible for the Rosetta antibody.  CDR detection is determined by ANARCI.  The output JSON output is designed to be redirected into a file and the path to this file is specified using the -antibody:json_cdr flag, which bypass the default regular expression method for CDR sequence range detection.
## @author Dave La (dave.la@cyrusbio.com)

import sys
from subprocess import os
from collections import defaultdict
import json
import argparse

def main (args):
	'''
	This script will take a fasta file with heavy and and light chain sequences for
	an antibody to be modelled by Rosetta Antibody (antibody.cc) and uses ANARCI to
	determine the CDR ranges.  The CDR ranges will be output to STDOUT in JSON format
	intended to be redirected into a file where it is specified and used with the argument 
	"-antibody:json_cdr" in antibody.cc app for by-passsing the regular expression used by 
	default to identify CDR regions.

	Requirements (accessible through your environmental PATH variable)
	Install ANARCI package (requires Python v2.7, v3.0+ not tested)
	Install Hmmer package (v3.2.1+ required by ANARCI)
	'''
	parser = argparse.ArgumentParser(description=main.__doc__)
	parser.add_argument("fasta_file")
	args = parser.parse_args()

	# Check if fasta file exist
	if not os.path.isfile(args.fasta_file):
		print "File", args.fasta_file, "does not exist!"
		sys.exit()

	# ANARCI Run
	#print "CMD:", anarci_cmd
	anarci_cmd = "ANARCI -i " + args.fasta_file + " --scheme aho";

	# Capture ANARCHI STDOUT
	heavy_seq_num = 0
	light_seq_num = 0

	# Dictionaries to help translate ANARCI numbering to real sequence numbering (required by Rosetta Antibody)
	heavy_a2s = defaultdict(dict)
	light_a2s = defaultdict(dict)

	with os.popen(anarci_cmd) as fp:

		for line in fp:
			line = line.rstrip()

			if line[0] != '#' and line[0] != '/':
				res_info = line.split()
				chain = res_info[0]
				res_num = res_info[1]
				aa = res_info[2]

				if aa != '-':

					if chain == 'H':
						heavy_seq_num += 1
						heavy_a2s[res_num] = heavy_seq_num
						#print(heavy_seq_num, chain, res_num, aa, heavy_a2s[res_num])

					if chain == 'L':
						light_seq_num += 1
						light_a2s[res_num] = light_seq_num
						#print(light_seq_num, chain, res_num, aa, light_a2s[res_num])

				#else:
					#print ('none', chain, res_num, aa)

	# Convert ANARCI numbering to real sequence numbering (plus adustments for rosetta antibody input)
	# Note: this assumes AHO numbering generated by ANARCI
	# AHO Reference: https://www.bioc.uzh.ch/plueckthun/antibody/Numbering/index.html	
						
	seq_cdr = defaultdict(dict)

	seq_cdr['h1']['begin'] = heavy_a2s['20'] + 6
	seq_cdr['h1']['end'] = heavy_a2s['47'] - 5

	seq_cdr['h2']['begin'] = heavy_a2s['51'] + 5
	seq_cdr['h2']['end'] = heavy_a2s['82'] - 6

	seq_cdr['h3']['begin'] = heavy_a2s['102'] + 6
	seq_cdr['h3']['end'] = heavy_a2s['144'] - 6

	seq_cdr['l1']['begin'] = light_a2s['20'] + 3
	seq_cdr['l1']['end'] = light_a2s['47'] - 5

	seq_cdr['l2']['begin'] = light_a2s['51'] + 6
	seq_cdr['l2']['end'] = light_a2s['82'] - 10

	seq_cdr['l3']['begin'] = light_a2s['102'] + 4
	seq_cdr['l3']['end'] = light_a2s['144'] - 6


	# Output JSON
	print json.dumps(seq_cdr,indent=3)

if __name__ == "__main__": main(sys.argv)
